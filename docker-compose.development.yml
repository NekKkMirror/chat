version: '3.8'

services:
  app:
    build:
      context: .
      target: development
    ports:
      - '${APP_PORT}:${APP_PORT}'
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - APP_PORT=${APP_PORT}
      - APP_HOST=${APP_HOST}
      - NODE_ENV=${NODE_ENV}
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
#    networks:
#      - vpn
    command: yarn start:dev

  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '${POSTGRES_PORT}:${POSTGRES_PORT}'
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./development/db/development-init.sql.gz:/docker-entrypoint-initdb.d/init.sql.gz:ro
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 30s
      timeout: 10s
      retries: 5
#    networks:
#      - vpn

volumes:
  postgres-data:

#networks:
#  vpn:
#    driver: bridge
